# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.shortcuts import render
from django.http import HttpResponse
from sblog.models import Article
from datetime import datetime
from django.http import Http404
from django.contrib.syndication.views import Feed  # 注意加入该import语句
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger  #添加包
# Create your views here.
def home(request):
    posts = Article.objects.all() # 获取全部的 Article对象
    paginator = Paginator(posts, 2) # 每页显示2个
    page = request.GET.get('page')
    try:
        post_list = paginator.page(page)
    except PageNotAnInteger:
        post_list = paginator.page(1)
    except EmptyPage:
        post_list = paginator.paginator(paginator.num_pages) 
    return  render(request, 'home.html', {'post_list': post_list})

def detail(request, id):
    try:
        post = Article.objects.get(id = str(id))
    except Article.DoesNotExist:
        raise Http404    
    return render (request, 'post.html', { 'post': post })

def archives(request):
    try:
        post_list = Article.objects.all()
    except Article.DoesNotExist:
        raise Http404
    return render(request, 'archives.html', {'post_list' : post_list, 
                                            'error' : False})
 
def search_tag(request, tag):
    try:
        post_list = Article.objects.filter(category = tag)
    except Article.DoesotExist:
        raise Http404
    return render(request, 'tag.html', {'post_list': post_list})   

def about_me(request):
    return render(request, 'aboutme.html')

def blog_search(request):
    if 's' in request.GET:
        s = request.GET['s'] #request.GET 可以看成一个字典，用GET方法传递的值都会保存到其中
        if not s: # 如果直接回车,即不输入内容,此时就没有"post_list"对象, 所以返回空的内容
            return render(request, "home.html")
        else:
            post_list =Article.objects.filter(title__icontains = s) # 此处用于筛选是否有相应的标题
            if len(post_list) ==0:    # 如果筛选结果不匹配
                return render(request, 'archives.html', {'post_list' : post_list, 
                                                                            'error': True}) 
            else:
                return render(request, 'archives.html', {'post_list': post_list, 'error': False})                                                                        
    return redirect('/')    

class RSSFeed(Feed):
    title = "RSS feed - sblog "
    link = "feeds/posts/"
    description = "RSS feed - blog posts"
    
    def items(self):
        return Article.objects.order_by('-date_time')  # 数据排序,按时间倒序
        
    def item_title(self, item):
        return item.title
        
    def item_pubdate(self, item):
        return item.date_time
        
    def item_description(self, item):
        return item.content
       
def test(request):
    return render(request, 'test.html', {'current_time': datetime.now()})

